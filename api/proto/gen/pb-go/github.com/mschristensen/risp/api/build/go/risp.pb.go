// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: risp.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectionState int32

const (
	ConnectionState_CONNECTED  ConnectionState = 0
	ConnectionState_FINALISING ConnectionState = 1
	ConnectionState_CLOSING    ConnectionState = 2
)

// Enum value maps for ConnectionState.
var (
	ConnectionState_name = map[int32]string{
		0: "CONNECTED",
		1: "FINALISING",
		2: "CLOSING",
	}
	ConnectionState_value = map[string]int32{
		"CONNECTED":  0,
		"FINALISING": 1,
		"CLOSING":    2,
	}
)

func (x ConnectionState) Enum() *ConnectionState {
	p := new(ConnectionState)
	*p = x
	return p
}

func (x ConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_risp_proto_enumTypes[0].Descriptor()
}

func (ConnectionState) Type() protoreflect.EnumType {
	return &file_risp_proto_enumTypes[0]
}

func (x ConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionState.Descriptor instead.
func (ConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_risp_proto_rawDescGZIP(), []int{0}
}

type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  ConnectionState `protobuf:"varint,1,opt,name=state,proto3,enum=risp.v1.ConnectionState" json:"state,omitempty"`
	Uuid   []byte          `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Window []byte          `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	Ack    []byte          `protobuf:"bytes,4,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_risp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_risp_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMessage) GetState() ConnectionState {
	if x != nil {
		return x.State
	}
	return ConnectionState_CONNECTED
}

func (x *ClientMessage) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *ClientMessage) GetWindow() []byte {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ClientMessage) GetAck() []byte {
	if x != nil {
		return x.Ack
	}
	return nil
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    ConnectionState `protobuf:"varint,1,opt,name=state,proto3,enum=risp.v1.ConnectionState" json:"state,omitempty"`
	Offset   []byte          `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Payload  uint32          `protobuf:"varint,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Checksum []byte          `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_risp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_risp_proto_rawDescGZIP(), []int{1}
}

func (x *ServerMessage) GetState() ConnectionState {
	if x != nil {
		return x.State
	}
	return ConnectionState_CONNECTED
}

func (x *ServerMessage) GetOffset() []byte {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ServerMessage) GetPayload() uint32 {
	if x != nil {
		return x.Payload
	}
	return 0
}

func (x *ServerMessage) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

var File_risp_proto protoreflect.FileDescriptor

var file_risp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x69, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x69,
	0x73, 0x70, 0x2e, 0x76, 0x31, 0x22, 0x7d, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x2a, 0x3d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x32, 0x45, 0x0a, 0x04, 0x52, 0x49, 0x53, 0x50, 0x12, 0x3d, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x72, 0x69, 0x73, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x72, 0x69, 0x73, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x73, 0x63, 0x68, 0x72, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x2f, 0x72, 0x69, 0x73, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_risp_proto_rawDescOnce sync.Once
	file_risp_proto_rawDescData = file_risp_proto_rawDesc
)

func file_risp_proto_rawDescGZIP() []byte {
	file_risp_proto_rawDescOnce.Do(func() {
		file_risp_proto_rawDescData = protoimpl.X.CompressGZIP(file_risp_proto_rawDescData)
	})
	return file_risp_proto_rawDescData
}

var file_risp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_risp_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_risp_proto_goTypes = []interface{}{
	(ConnectionState)(0),  // 0: risp.v1.ConnectionState
	(*ClientMessage)(nil), // 1: risp.v1.ClientMessage
	(*ServerMessage)(nil), // 2: risp.v1.ServerMessage
}
var file_risp_proto_depIdxs = []int32{
	0, // 0: risp.v1.ClientMessage.state:type_name -> risp.v1.ConnectionState
	0, // 1: risp.v1.ServerMessage.state:type_name -> risp.v1.ConnectionState
	1, // 2: risp.v1.RISP.Connect:input_type -> risp.v1.ClientMessage
	2, // 3: risp.v1.RISP.Connect:output_type -> risp.v1.ServerMessage
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_risp_proto_init() }
func file_risp_proto_init() {
	if File_risp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_risp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_risp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_risp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_risp_proto_goTypes,
		DependencyIndexes: file_risp_proto_depIdxs,
		EnumInfos:         file_risp_proto_enumTypes,
		MessageInfos:      file_risp_proto_msgTypes,
	}.Build()
	File_risp_proto = out.File
	file_risp_proto_rawDesc = nil
	file_risp_proto_goTypes = nil
	file_risp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RISPClient is the client API for RISP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RISPClient interface {
	// Connect establishes a connection over which data is exchanged.
	Connect(ctx context.Context, opts ...grpc.CallOption) (RISP_ConnectClient, error)
}

type rISPClient struct {
	cc grpc.ClientConnInterface
}

func NewRISPClient(cc grpc.ClientConnInterface) RISPClient {
	return &rISPClient{cc}
}

func (c *rISPClient) Connect(ctx context.Context, opts ...grpc.CallOption) (RISP_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RISP_serviceDesc.Streams[0], "/risp.v1.RISP/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &rISPConnectClient{stream}
	return x, nil
}

type RISP_ConnectClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type rISPConnectClient struct {
	grpc.ClientStream
}

func (x *rISPConnectClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rISPConnectClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RISPServer is the server API for RISP service.
type RISPServer interface {
	// Connect establishes a connection over which data is exchanged.
	Connect(RISP_ConnectServer) error
}

// UnimplementedRISPServer can be embedded to have forward compatible implementations.
type UnimplementedRISPServer struct {
}

func (*UnimplementedRISPServer) Connect(RISP_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterRISPServer(s *grpc.Server, srv RISPServer) {
	s.RegisterService(&_RISP_serviceDesc, srv)
}

func _RISP_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RISPServer).Connect(&rISPConnectServer{stream})
}

type RISP_ConnectServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type rISPConnectServer struct {
	grpc.ServerStream
}

func (x *rISPConnectServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rISPConnectServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RISP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "risp.v1.RISP",
	HandlerType: (*RISPServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _RISP_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "risp.proto",
}
