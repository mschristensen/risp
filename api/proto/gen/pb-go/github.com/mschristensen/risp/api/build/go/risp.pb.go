// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: risp.proto

package _go

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_risp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_risp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_risp_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Packet) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_risp_proto protoreflect.FileDescriptor

var file_risp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x69, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x69,
	0x73, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x30, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x88, 0x01, 0x0a, 0x04, 0x52, 0x49, 0x53, 0x50, 0x12, 0x4f, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x72, 0x69, 0x73, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x69, 0x73, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x73, 0x63, 0x68,
	0x72, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x2f, 0x72, 0x69, 0x73, 0x70, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_risp_proto_rawDescOnce sync.Once
	file_risp_proto_rawDescData = file_risp_proto_rawDesc
)

func file_risp_proto_rawDescGZIP() []byte {
	file_risp_proto_rawDescOnce.Do(func() {
		file_risp_proto_rawDescData = protoimpl.X.CompressGZIP(file_risp_proto_rawDescData)
	})
	return file_risp_proto_rawDescData
}

var file_risp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_risp_proto_goTypes = []interface{}{
	(*Packet)(nil),        // 0: risp.v1.Packet
	(*emptypb.Empty)(nil), // 1: google.protobuf.Empty
}
var file_risp_proto_depIdxs = []int32{
	1, // 0: risp.v1.RISP.Ping:input_type -> google.protobuf.Empty
	0, // 1: risp.v1.RISP.Connect:input_type -> risp.v1.Packet
	1, // 2: risp.v1.RISP.Ping:output_type -> google.protobuf.Empty
	0, // 3: risp.v1.RISP.Connect:output_type -> risp.v1.Packet
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_risp_proto_init() }
func file_risp_proto_init() {
	if File_risp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_risp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_risp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_risp_proto_goTypes,
		DependencyIndexes: file_risp_proto_depIdxs,
		MessageInfos:      file_risp_proto_msgTypes,
	}.Build()
	File_risp_proto = out.File
	file_risp_proto_rawDesc = nil
	file_risp_proto_goTypes = nil
	file_risp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RISPClient is the client API for RISP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RISPClient interface {
	// Ping tells the caller if this service is ready to be called.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update a batch based on a status
	Connect(ctx context.Context, opts ...grpc.CallOption) (RISP_ConnectClient, error)
}

type rISPClient struct {
	cc grpc.ClientConnInterface
}

func NewRISPClient(cc grpc.ClientConnInterface) RISPClient {
	return &rISPClient{cc}
}

func (c *rISPClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/risp.v1.RISP/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rISPClient) Connect(ctx context.Context, opts ...grpc.CallOption) (RISP_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RISP_serviceDesc.Streams[0], "/risp.v1.RISP/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &rISPConnectClient{stream}
	return x, nil
}

type RISP_ConnectClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type rISPConnectClient struct {
	grpc.ClientStream
}

func (x *rISPConnectClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rISPConnectClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RISPServer is the server API for RISP service.
type RISPServer interface {
	// Ping tells the caller if this service is ready to be called.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Update a batch based on a status
	Connect(RISP_ConnectServer) error
}

// UnimplementedRISPServer can be embedded to have forward compatible implementations.
type UnimplementedRISPServer struct {
}

func (*UnimplementedRISPServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedRISPServer) Connect(RISP_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterRISPServer(s *grpc.Server, srv RISPServer) {
	s.RegisterService(&_RISP_serviceDesc, srv)
}

func _RISP_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RISPServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risp.v1.RISP/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RISPServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RISP_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RISPServer).Connect(&rISPConnectServer{stream})
}

type RISP_ConnectServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type rISPConnectServer struct {
	grpc.ServerStream
}

func (x *rISPConnectServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rISPConnectServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RISP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "risp.v1.RISP",
	HandlerType: (*RISPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RISP_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _RISP_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "risp.proto",
}
