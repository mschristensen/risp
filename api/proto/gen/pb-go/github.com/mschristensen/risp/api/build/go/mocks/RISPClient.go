// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"
	_go "risp/api/proto/gen/pb-go/github.com/mschristensen/risp/api/build/go"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RISPClient is an autogenerated mock type for the RISPClient type
type RISPClient struct {
	mock.Mock
}

// Connect provides a mock function with given fields: ctx, opts
func (_m *RISPClient) Connect(ctx context.Context, opts ...grpc.CallOption) (_go.RISP_ConnectClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 _go.RISP_ConnectClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) _go.RISP_ConnectClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(_go.RISP_ConnectClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRISPClient creates a new instance of RISPClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRISPClient(t testing.TB) *RISPClient {
	mock := &RISPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
